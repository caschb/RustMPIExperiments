# -*- org-confirm-babel-evaluate: nil; -*-
#+title: Rust MPI Experiments
#+author: Christian Asch

* Setting up repositories

#+begin_src bash :results output :exports both
git submodule update --init --recursive
#+end_src

This will clone the following repos:

+ [[https://gitlab.com/CNCA_CeNAT/bs-solctra-implementations.git][BS-Solctra Implementations]]: The original C++ MPI+OpenMP
  implementation of BS-Solctra
+ [[https://github.com/caschb/bs-solctra-mpi-rs][BS-Solctra-mpi-rs]]: My Rust+Rayon+MPI implementation of BS-Solctra
+ [[https://github.com/caschb/Kernels][Kernels]]: My fork of the Parallel Research Kernels which include the
  Rust MPI code of the PIC simulation



** Setting up C compiler for Kernels
#+begin_src bash :dir Kernels/common
module load mpich/3.3.2-gcc-9.3.0 gcc/9.3.0
cp make.defs.gcc make.defs
sed -i 's/^MPIDIR=.*/MPIDIR=\/opt\/tools\/mpich-3.3.2-gcc-9.3.0/' make.defs
#+end_src

#+RESULTS:

* Compiling BS-SOLCTRA MPI

We have to change the Makefile so it works on the =kura= nodes

#+begin_src bash :dir bs-solctra-implementations
yes input_1000.txt | head -n 10 | xargs cat > input_big.txt
#+end_src

#+RESULTS:

#+begin_src bash :results output :exports both
FILE=bs-solctra-implementations/Makefile
sed -i 's/^VECT_FLAGS=.*/VECT_FLAGS=-fopenmp/' $FILE
#+end_src

#+begin_src bash :results output :exports both :dir bs-solctra-implementations
module load mpich/3.3.2-gcc-9.3.0 gcc/9.3.0
make
#+end_src

#+RESULTS:
: mpicxx -O3 -std=c++11 -fopenmp -o bs-solctra-multinode solctra_multinode.h solctra_multinode.cpp main_multinode.cpp utils.h utils.cpp
: cp bs-solctra-multinode results
: rm bs-solctra-multinode;

* Compiling BS-SOLCTRA Rust+MPI

#+begin_src bash :results output :exports both :dir bs-solctra-mpi-rs
module load mpich/3.3.2-gcc-9.3.0 gcc/9.3.0
. /work/casch/spack/share/spack/setup-env.sh
spack env activate rustdev
cargo build -r -j 15
#+end_src

* Compiling PIC C+MPI

#+begin_src bash :results output :exports both :dir Kernels/MPI1/PIC-static
module load mpich/3.3.2-gcc-9.3.0 gcc/9.3.0
make pic
#+end_src

#+RESULTS:
: /opt/tools/mpich-3.3.2-gcc-9.3.0/bin/mpicc -O3 -mtune=native -ffast-math -g3 -Wall   -DMPI -DVERBOSE=0   -DRESTRICT_KEYWORD=0  -I../../include -c pic.c
: /opt/tools/mpich-3.3.2-gcc-9.3.0/bin/mpicc -O3 -mtune=native -ffast-math -g3 -Wall   -DMPI -DVERBOSE=0   -DRESTRICT_KEYWORD=0  -I../../include -c ../../common/MPI_bail_out.c
: /opt/tools/mpich-3.3.2-gcc-9.3.0/bin/mpicc -O3 -mtune=native -ffast-math -g3 -Wall   -DMPI -DVERBOSE=0   -DRESTRICT_KEYWORD=0  -I../../include -c ../../common/wtime.c
: /opt/tools/mpich-3.3.2-gcc-9.3.0/bin/mpicc -O3 -mtune=native -ffast-math -g3 -Wall   -DMPI -DVERBOSE=0   -DRESTRICT_KEYWORD=0  -I../../include -c ../../common/random_draw.c
: /opt/tools/mpich-3.3.2-gcc-9.3.0/bin/mpicc -o pic   -O3 -mtune=native -ffast-math -g3 -Wall   -DMPI pic.o MPI_bail_out.o wtime.o random_draw.o  -lm

* Compiling PIC Rust+MPI

#+begin_src bash :results output :exports both :dir Kernels/RUST/pic-mpi
module load mpich/3.3.2-gcc-9.3.0 gcc/9.3.0
. /work/casch/spack/share/spack/setup-env.sh
spack env activate rustdev
cargo build -r
#+end_src

#+RESULTS:

* Experiments
** Common components for SLURM files

*** Header

We prepare the heading of all SLURM Files
#+begin_src bash :noweb-ref header
#SBATCH --partition=kura-all
#SBATCH --output=%x_%j.out
#SBATCH --error=%x_%j.err
#SBATCH --time=12:00:00
#SBATCH --ntasks-per-node=20
#SBATCH --cpus-per-task=1
#SBATCH --exclusive
#+end_src

*** Load modules

#+begin_src bash :noweb-ref modules
module purge
module load mpich/3.3.2-gcc-9.3.0 gcc/9.3.0
#+end_src

*** Kura module fix

#+begin_src bash :noweb-ref kura-fix
. /opt/Modules/3.2.10/init/sh
#+end_src

** BS-SOLCTRA MPI+OpenMP Weak Scaling
*** Job Name

#+begin_src bash :noweb-ref bsmo-name
#SBATCH --job-name solc-cpp-ws
#+end_src

*** Execution commands

#+begin_src bash :noweb-ref bsmo-command
export OMP_NUM_THREADS=${SLURM_NTASKS_PER_NODE}
export OMP_SCHEDULE=dynamic
export REPETITIONS=10
TOTAL_PARTICLES=$((${SLURM_NNODES}*3968))
for (( i = 0; i < ${REPETITIONS}; i++))
do
    mpiexec -n ${SLURM_NNODES}\
	    ./bs-solctra-multinode\
	    -length ${TOTAL_PARTICLES}\
	    -particles input_big.txt\
	    -id ${SLURM_JOB_ID}${i}\
	    -resource resources/\
	    -mode 1\
	    -magnetic_prof 0 100 0 2\
	    -print_typef 1\
	    -steps 1000
done
#+end_src

*** Assemble Slurm files for weak scaling and copy files

**** 1 node

#+begin_src bash :dir sol-mpi-wk/1/ :mkdirp yes
ln -sf ~/RustMPIExperiments/bs-solctra-implementations/input_1000.txt .
ln -sf ~/RustMPIExperiments/bs-solctra-implementations/resources .
ln -sf ~/RustMPIExperiments/bs-solctra-implementations/results/bs-solctra-multinode .
#+end_src

#+begin_src bash :shebang #!/bin/bash :tangle sol-mpi-wk/1/run.slurm :mkdirp yes :noweb yes
<<header>>
#SBATCH --nodes 1
<<bsmo-name>>
<<kura-fix>>
<<modules>>
<<bsmo-command>>
#+end_src

**** 2 nodes

#+begin_src bash :dir sol-mpi-wk/2/ :mkdirp yes
ln -sf ~/RustMPIExperiments/bs-solctra-implementations/input_1000.txt .
ln -sf ~/RustMPIExperiments/bs-solctra-implementations/resources .
ln -sf ~/RustMPIExperiments/bs-solctra-implementations/results/bs-solctra-multinode .
#+end_src

#+RESULTS:


#+begin_src bash :shebang #!/bin/bash :tangle sol-mpi-wk/2/run.slurm :mkdirp yes :noweb yes
<<header>>
#SBATCH --nodes 2
<<bsmo-name>>
<<kura-fix>>
<<modules>>
<<bsmo-command>>
#+end_src

**** 4 nodes

#+begin_src bash :dir sol-mpi-wk/4/ :mkdirp yes
ln -sf ~/RustMPIExperiments/bs-solctra-implementations/input_1000.txt .
ln -sf ~/RustMPIExperiments/bs-solctra-implementations/resources .
ln -sf ~/RustMPIExperiments/bs-solctra-implementations/results/bs-solctra-multinode .
#+end_src

#+RESULTS:


#+begin_src bash :shebang #!/bin/bash :tangle sol-mpi-wk/4/run.slurm :mkdirp yes :noweb yes
<<header>>
#SBATCH --nodes 4
<<bsmo-name>>
<<kura-fix>>
<<modules>>
<<bsmo-command>>
#+end_src

**** 8 nodes
#+begin_src bash :dir sol-mpi-wk/8/ :mkdirp yes
ln -sf ~/RustMPIExperiments/bs-solctra-implementations/input_1000.txt .
ln -sf ~/RustMPIExperiments/bs-solctra-implementations/resources .
ln -sf ~/RustMPIExperiments/bs-solctra-implementations/results/bs-solctra-multinode .
#+end_src

#+RESULTS:


#+begin_src bash :shebang #!/bin/bash :tangle sol-mpi-wk/8/run.slurm :mkdirp yes :noweb yes
<<header>>
#SBATCH --nodes 8
<<bsmo-name>>
<<kura-fix>>
<<modules>>
<<bsmo-command>>
#+end_src

**** 12 nodes
#+begin_src bash :dir sol-mpi-wk/12/ :mkdirp yes
ln -sf ~/RustMPIExperiments/bs-solctra-implementations/input_1000.txt .
ln -sf ~/RustMPIExperiments/bs-solctra-implementations/resources .
ln -sf ~/RustMPIExperiments/bs-solctra-implementations/results/bs-solctra-multinode .
#+end_src

#+RESULTS:


#+begin_src bash :shebang #!/bin/bash :tangle sol-mpi-wk/12/run.slurm :mkdirp yes :noweb yes
<<header>>
#SBATCH --nodes 12
<<bsmo-name>>
<<kura-fix>>
<<modules>>
<<bsmo-command>>
#+end_src

** BS-SOLCTRA MPI+OpenMP Strong Scaling

*** Job Name
#+begin_src bash :noweb-ref bsms-name
#SBATCH --job-name solc-cpp-st
#+end_src

*** Execution commands

#+begin_src bash :noweb-ref bsms-command
export OMP_NUM_THREADS=${SLURM_NTASKS_PER_NODE}
export OMP_SCHEDULE=dynamic
TOTAL_PARTICLES=$((12*2560))
REPETITIONS=10
for (( i = 0; i < ${REPETITIONS}; i++))
do
    mpiexec -n ${SLURM_NNODES}\
	    ./bs-solctra-multinode\
	    -length ${TOTAL_PARTICLES}\
	    -particles input_big.txt\
	    -id ${SLURM_JOB_ID}${i}\
	    -resource resources/\
	    -mode 1\
	    -magnetic_prof 0 100 0 2\
	    -print_typef 1\
	    -steps 1000
done
#+end_src

*** Assemble Slurm files for strong scaling and copy files

**** 1 node

#+begin_src bash :dir sol-mpi-st/1/ :mkdirp yes
ln -sf ~/RustMPIExperiments/bs-solctra-implementations/input_1000.txt .
ln -sf ~/RustMPIExperiments/bs-solctra-implementations/resources .
ln -sf ~/RustMPIExperiments/bs-solctra-implementations/results/bs-solctra-multinode .
#+end_src

#+RESULTS:


#+begin_src bash :shebang #!/bin/bash :tangle sol-mpi-st/1/run.slurm :mkdirp yes :noweb yes
<<header>>
#SBATCH --nodes 1
<<bsms-name>>
<<kura-fix>>
<<modules>>
<<bsms-command>>
#+end_src

**** 2 nodes

#+begin_src bash :dir sol-mpi-st/2/ :mkdirp yes
ln -sf ~/RustMPIExperiments/bs-solctra-implementations/input_1000.txt .
ln -sf ~/RustMPIExperiments/bs-solctra-implementations/resources .
ln -sf ~/RustMPIExperiments/bs-solctra-implementations/results/bs-solctra-multinode .
#+end_src

#+RESULTS:


#+begin_src bash :shebang #!/bin/bash :tangle sol-mpi-st/2/run.slurm :mkdirp yes :noweb yes
<<header>>
#SBATCH --nodes 2
<<bsms-name>>
<<kura-fix>>
<<modules>>
<<bsms-command>>
#+end_src

**** 4 nodes

#+begin_src bash :dir sol-mpi-st/4/ :mkdirp yes
ln -sf ~/RustMPIExperiments/bs-solctra-implementations/input_1000.txt .
ln -sf ~/RustMPIExperiments/bs-solctra-implementations/resources .
ln -sf ~/RustMPIExperiments/bs-solctra-implementations/results/bs-solctra-multinode .
#+end_src

#+RESULTS:


#+begin_src bash :shebang #!/bin/bash :tangle sol-mpi-st/4/run.slurm :mkdirp yes :noweb yes
<<header>>
#SBATCH --nodes 4
<<bsms-name>>
<<kura-fix>>
<<modules>>
<<bsms-command>>
#+end_src

**** 8 nodes
#+begin_src bash :dir sol-mpi-st/8/ :mkdirp yes
ln -sf ~/RustMPIExperiments/bs-solctra-implementations/input_1000.txt .
ln -sf ~/RustMPIExperiments/bs-solctra-implementations/resources .
ln -sf ~/RustMPIExperiments/bs-solctra-implementations/results/bs-solctra-multinode .
#+end_src

#+RESULTS:


#+begin_src bash :shebang #!/bin/bash :tangle sol-mpi-st/8/run.slurm :mkdirp yes :noweb yes
<<header>>
#SBATCH --nodes 8
<<bsms-name>>
<<kura-fix>>
<<modules>>
<<bsms-command>>
#+end_src

**** 12 nodes
#+begin_src bash :dir sol-mpi-st/12/ :mkdirp yes
ln -sf ~/RustMPIExperiments/bs-solctra-implementations/input_1000.txt .
ln -sf ~/RustMPIExperiments/bs-solctra-implementations/resources .
ln -sf ~/RustMPIExperiments/bs-solctra-implementations/results/bs-solctra-multinode .
#+end_src

#+RESULTS:


#+begin_src bash :shebang #!/bin/bash :tangle sol-mpi-st/12/run.slurm :mkdirp yes :noweb yes
<<header>>
#SBATCH --nodes 12
<<bsms-name>>
<<kura-fix>>
<<modules>>
<<bsms-command>>
#+end_src

** BS-SOLCTRA MPI+Rayon Weak Scaling

*** Job Name

#+begin_src bash :noweb-ref bsrw-name
#SBATCH --job-name solc-rust-ws
#+end_src

*** Execution commands

#+begin_src bash :noweb-ref bsrw-command
export RAYON_NUM_THREADS=${SLURM_NTASKS_PER_NODE}
TOTAL_PARTICLES=$((${SLURM_NNODES}*2560))
REPETITIONS=10
for (( i = 0; i < ${REPETITIONS}; i++))
do
    RUST_LOG=info mpiexec -n ${SLURM_NNODES}\
		  ./bs-solctra-rs\
		  --num-particles ${TOTAL_PARTICLES}\
		  --particles-file input_1000.csv\
		  --resource-path resources/\
		  --mode 1\
		  --magprof 0\
		  --steps 1000\
		  -w 10000\
		  --output results_${SLURM_JOBID}${i}
done
#+end_src

*** Assemble Slurm files for weak scaling and copy files
**** 1 node

#+begin_src bash :dir sol-rst-wk/1/ :mkdirp yes
ln -sf ~/RustMPIExperiments/bs-solctra-mpi-rs/tests/test-resources/input_1000.csv .
ln -sf ~/RustMPIExperiments/bs-solctra-mpi-rs/tests/test-resources/resources .
ln -sf ~/RustMPIExperiments/bs-solctra-mpi-rs/target/release/bs-solctra-rs .
#+end_src


#+begin_src bash :shebang #!/bin/bash :tangle sol-rst-wk/1/run.slurm :mkdirp yes :noweb yes
<<header>>
#SBATCH --nodes 1
<<bsrw-name>>
<<kura-fix>>
<<modules>>
source /work/casch/spack/share/spack/setup-env.sh
spack env activate rustdev
<<bsrw-command>>
#+end_src

**** 2 node

#+begin_src bash :dir sol-rst-wk/2/ :mkdirp yes
ln -sf ~/RustMPIExperiments/bs-solctra-mpi-rs/tests/test-resources/input_1000.csv .
ln -sf ~/RustMPIExperiments/bs-solctra-mpi-rs/tests/test-resources/resources .
ln -sf ~/RustMPIExperiments/bs-solctra-mpi-rs/target/release/bs-solctra-rs .
#+end_src

#+RESULTS:


#+begin_src bash :shebang #!/bin/bash :tangle sol-rst-wk/2/run.slurm :mkdirp yes :noweb yes
<<header>>
#SBATCH --nodes 2
<<bsrw-name>>
<<kura-fix>>
<<modules>>
source /work/casch/spack/share/spack/setup-env.sh
spack env activate rustdev
<<bsrw-command>>
#+end_src

**** 4 nodes

#+begin_src bash :dir sol-rst-wk/4/ :mkdirp yes
ln -sf ~/RustMPIExperiments/bs-solctra-mpi-rs/tests/test-resources/input_1000.csv .
ln -sf ~/RustMPIExperiments/bs-solctra-mpi-rs/tests/test-resources/resources .
ln -sf ~/RustMPIExperiments/bs-solctra-mpi-rs/target/release/bs-solctra-rs .
#+end_src

#+RESULTS:


#+begin_src bash :shebang #!/bin/bash :tangle sol-rst-wk/4/run.slurm :mkdirp yes :noweb yes
<<header>>
#SBATCH --nodes 4
<<bsrw-name>>
<<kura-fix>>
<<modules>>
source /work/casch/spack/share/spack/setup-env.sh
spack env activate rustdev
<<bsrw-command>>
#+end_src

**** 8 nodes

#+begin_src bash :dir sol-rst-wk/8/ :mkdirp yes
ln -sf ~/RustMPIExperiments/bs-solctra-mpi-rs/tests/test-resources/input_1000.csv .
ln -sf ~/RustMPIExperiments/bs-solctra-mpi-rs/tests/test-resources/resources .
ln -sf ~/RustMPIExperiments/bs-solctra-mpi-rs/target/release/bs-solctra-rs .
#+end_src

#+RESULTS:


#+begin_src bash :shebang #!/bin/bash :tangle sol-rst-wk/8/run.slurm :mkdirp yes :noweb yes
<<header>>
#SBATCH --nodes 8
<<bsrw-name>>
<<kura-fix>>
<<modules>>
source /work/casch/spack/share/spack/setup-env.sh
spack env activate rustdev
<<bsrw-command>>
#+end_src

**** 12 nodes

#+begin_src bash :dir sol-rst-wk/12/ :mkdirp yes
ln -sf ~/RustMPIExperiments/bs-solctra-mpi-rs/tests/test-resources/input_1000.csv .
ln -sf ~/RustMPIExperiments/bs-solctra-mpi-rs/tests/test-resources/resources .
ln -sf ~/RustMPIExperiments/bs-solctra-mpi-rs/target/release/bs-solctra-rs .
#+end_src

#+RESULTS:


#+begin_src bash :shebang #!/bin/bash :tangle sol-rst-wk/12/run.slurm :mkdirp yes :noweb yes
<<header>>
#SBATCH --nodes 12

<<bsrw-name>>
<<kura-fix>>
<<modules>>
source /work/casch/spack/share/spack/setup-env.sh
spack env activate rustdev
<<bsrw-command>>
#+end_src

** BS-SOLCTRA MPI+Rayon Strong Scaling

*** Job Name

#+begin_src bash :noweb-ref bsrs-name
#SBATCH --job-name solc-rust-st
#+end_src

*** Execution commands

#+begin_src bash :noweb-ref bsrs-command
export RAYON_NUM_THREADS=${SLURM_NTASKS_PER_NODE}
TOTAL_PARTICLES=$((12*2560))
REPETITIONS=10
for (( i = 0; i < ${REPETITIONS}; i++))
do
    RUST_LOG=debug mpiexec -n ${SLURM_NNODES}\
		  ./bs-solctra-rs\
		  --num-particles ${TOTAL_PARTICLES}\
		  --particles-file input_1000.csv\
		  --resource-path resources/\
		  --mode 1\
		  --magprof 0\
		  --steps 1000\
		  -w 10000\
		  --output results_${SLURM_JOBID}${i}
done
#+end_src

*** Assemble Slurm files for weak scaling and copy files

**** 1 node

#+begin_src bash :dir sol-rst-st/1/ :mkdirp yes
ln -sf ~/RustMPIExperiments/bs-solctra-mpi-rs/tests/test-resources/input_1000.csv .
ln -sf ~/RustMPIExperiments/bs-solctra-mpi-rs/tests/test-resources/resources .
ln -sf ~/RustMPIExperiments/bs-solctra-mpi-rs/target/release/bs-solctra-rs .
#+end_src

#+RESULTS:


#+begin_src bash :shebang #!/bin/bash :tangle sol-rst-st/1/run.slurm :mkdirp yes :noweb yes
<<header>>
#SBATCH --nodes 1
<<bsrs-name>>
<<kura-fix>>
<<modules>>
source /work/casch/spack/share/spack/setup-env.sh
spack env activate rustdev
<<bsrs-command>>
#+end_src

**** 2 node

#+begin_src bash :dir sol-rst-st/2/ :mkdirp yes
ln -sf ~/RustMPIExperiments/bs-solctra-mpi-rs/tests/test-resources/input_1000.csv .
ln -sf ~/RustMPIExperiments/bs-solctra-mpi-rs/tests/test-resources/resources .
ln -sf ~/RustMPIExperiments/bs-solctra-mpi-rs/target/release/bs-solctra-rs .
#+end_src

#+RESULTS:


#+begin_src bash :shebang #!/bin/bash :tangle sol-rst-st/2/run.slurm :mkdirp yes :noweb yes
<<header>>
#SBATCH --nodes 2
<<bsrs-name>>
<<kura-fix>>
<<modules>>
source /work/casch/spack/share/spack/setup-env.sh
spack env activate rustdev
<<bsrs-command>>
#+end_src

**** 4 nodes

#+begin_src bash :dir sol-rst-st/4/ :mkdirp yes
ln -sf ~/RustMPIExperiments/bs-solctra-mpi-rs/tests/test-resources/input_1000.csv .
ln -sf ~/RustMPIExperiments/bs-solctra-mpi-rs/tests/test-resources/resources .
ln -sf ~/RustMPIExperiments/bs-solctra-mpi-rs/target/release/bs-solctra-rs .
#+end_src

#+RESULTS:


#+begin_src bash :shebang #!/bin/bash :tangle sol-rst-st/4/run.slurm :mkdirp yes :noweb yes
<<header>>
#SBATCH --nodes 4
<<bsrs-name>>
<<kura-fix>>
<<modules>>
source /work/casch/spack/share/spack/setup-env.sh
spack env activate rustdev
<<bsrs-command>>
#+end_src

**** 8 nodes

#+begin_src bash :dir sol-rst-st/8/ :mkdirp yes
ln -sf ~/RustMPIExperiments/bs-solctra-mpi-rs/tests/test-resources/input_1000.csv .
ln -sf ~/RustMPIExperiments/bs-solctra-mpi-rs/tests/test-resources/resources .
ln -sf ~/RustMPIExperiments/bs-solctra-mpi-rs/target/release/bs-solctra-rs .
#+end_src

#+RESULTS:


#+begin_src bash :shebang #!/bin/bash :tangle sol-rst-st/8/run.slurm :mkdirp yes :noweb yes
<<header>>
#SBATCH --nodes 8
<<bsrs-name>>
<<kura-fix>>
<<modules>>
source /work/casch/spack/share/spack/setup-env.sh
spack env activate rustdev
<<bsrs-command>>
#+end_src

**** 12 nodes

#+begin_src bash :dir sol-rst-st/12/ :mkdirp yes
ln -sf ~/RustMPIExperiments/bs-solctra-mpi-rs/tests/test-resources/input_1000.csv .
ln -sf ~/RustMPIExperiments/bs-solctra-mpi-rs/tests/test-resources/resources .
ln -sf ~/RustMPIExperiments/bs-solctra-mpi-rs/target/release/bs-solctra-rs .
#+end_src

#+RESULTS:


#+begin_src bash :shebang #!/bin/bash :tangle sol-rst-st/12/run.slurm :mkdirp yes :noweb yes
<<header>>
#SBATCH --nodes 12

<<bsrs-name>>
<<kura-fix>>
<<modules>>
source /work/casch/spack/share/spack/setup-env.sh
spack env activate rustdev
<<bsrs-command>>
#+end_src

** PIC C Weak Scaling

*** Job Name
#+begin_src bash :noweb-ref piccw-name
#SBATCH --job-name pic-c-ws
#+end_src

*** Execution commands

#+begin_src bash :noweb-ref piccw-command
export OMP_NUM_THREADS=${SLURM_NTASKS_PER_NODE}
export OMP_SCHEDULE=dynamic
export REPETITIONS=10
TOTAL_STEPS=100
TOTAL_PARTICLES=$((${SLURM_NNODES}*102400))
for (( i = 0; i < ${REPETITIONS}; i++))
do
    echo "~rep: ${i}~" >&2
    echo "GEOMETRIC" >&2
    time mpiexec -n ${SLURM_NNODES}\
	    ./pic\
	    ${TOTAL_STEPS}\
	    1000\
	    ${TOTAL_PARTICLES}\
	    1 2\
	    GEOMETRIC 0.99
    echo "###################################"
    echo "SINUSOIDAL" >&2
    time mpiexec -n ${SLURM_NNODES}\
	    ./pic\
	    ${TOTAL_STEPS}\
	    1000\
	    ${TOTAL_PARTICLES}\
	    0 1\
	    SINUSOIDAL
    echo "###################################"
    echo "LINEAR" >&2
    time mpiexec -n ${SLURM_NNODES}\
	    ./pic\
	    ${TOTAL_STEPS}\
	    1000\
	    ${TOTAL_PARTICLES}\
	    1 0\
	    LINEAR\
	    1.0\
	    3.0
    echo "###################################"
    echo "PATCH" >&2
    time mpiexec -n ${SLURM_NNODES}\
	    ./pic\
	    ${TOTAL_STEPS}\
	    1000\
	    ${TOTAL_PARTICLES}\
	    1 0\
	    PATCH\
	    0 200\
	    100 200
done
#+end_src

*** Assemble Slurm files for weak scaling and copy files

**** 1 node

#+begin_src bash :dir pic-c-wk/1/ :mkdirp yes
ln -sf ~/RustMPIExperiments/Kernels/MPI1/PIC-static/pic .
#+end_src

#+RESULTS:


#+begin_src bash :shebang #!/bin/bash :tangle pic-c-wk/1/run.slurm :mkdirp yes :noweb yes
<<header>>
#SBATCH --nodes 1
<<piccw-name>>
<<kura-fix>>
<<modules>>
source /work/casch/spack/share/spack/setup-env.sh
spack env activate rustdev
<<piccw-command>>
#+end_src

**** 2 nodes

#+begin_src bash :dir pic-c-wk/2/ :mkdirp yes
ln -sf ~/RustMPIExperiments/Kernels/MPI1/PIC-static/pic .
#+end_src

#+RESULTS:


#+begin_src bash :shebang #!/bin/bash :tangle pic-c-wk/2/run.slurm :mkdirp yes :noweb yes
<<header>>
#SBATCH --nodes 2
<<piccw-name>>
<<kura-fix>>
<<modules>>
source /work/casch/spack/share/spack/setup-env.sh
spack env activate rustdev
<<piccw-command>>
#+end_src

**** 4 nodes

#+begin_src bash :dir pic-c-wk/4/ :mkdirp yes
ln -sf ~/RustMPIExperiments/Kernels/MPI1/PIC-static/pic .
#+end_src

#+RESULTS:


#+begin_src bash :shebang #!/bin/bash :tangle pic-c-wk/4/run.slurm :mkdirp yes :noweb yes
<<header>>
#SBATCH --nodes 4
<<piccw-name>>
<<kura-fix>>
<<modules>>
source /work/casch/spack/share/spack/setup-env.sh
spack env activate rustdev
<<piccw-command>>
#+end_src


**** 8 nodes

#+begin_src bash :dir pic-c-wk/8/ :mkdirp yes
ln -sf ~/RustMPIExperiments/Kernels/MPI1/PIC-static/pic .
#+end_src

#+RESULTS:


#+begin_src bash :shebang #!/bin/bash :tangle pic-c-wk/8/run.slurm :mkdirp yes :noweb yes
<<header>>
#SBATCH --nodes 8
<<piccw-name>>
<<kura-fix>>
<<modules>>
source /work/casch/spack/share/spack/setup-env.sh
spack env activate rustdev
<<piccw-command>>
#+end_src


**** 12 nodes

#+begin_src bash :dir pic-c-wk/12/ :mkdirp yes
ln -sf ~/RustMPIExperiments/Kernels/MPI1/PIC-static/pic .
#+end_src

#+RESULTS:


#+begin_src bash :shebang #!/bin/bash :tangle pic-c-wk/12/run.slurm :mkdirp yes :noweb yes
<<header>>
#SBATCH --nodes 12
<<piccw-name>>
<<kura-fix>>
<<modules>>
source /work/casch/spack/share/spack/setup-env.sh
spack env activate rustdev
<<piccw-command>>
#+end_src

** PIC C Strong Scaling

*** Job Name
#+begin_src bash :noweb-ref piccs-name
#SBATCH --job-name pic-c-st
#+end_src

*** Execution commands

#+begin_src bash :noweb-ref piccs-command
export OMP_NUM_THREADS=${SLURM_NTASKS_PER_NODE}
export OMP_SCHEDULE=dynamic
export REPETITIONS=10
TOTAL_STEPS=100
TOTAL_PARTICLES=$((12*102400))
for (( i = 0; i < ${REPETITIONS}; i++))
do
    echo "~rep: ${i}~" >&2
    echo "GEOMETRIC" >&2
    time mpiexec -n ${SLURM_NNODES}\
	    ./pic\
	    ${TOTAL_STEPS}\
	    1000\
	    ${TOTAL_PARTICLES}\
	    1 2\
	    GEOMETRIC 0.99
    echo "###################################"
    echo "SINUSOIDAL" >&2
    time mpiexec -n ${SLURM_NNODES}\
	    ./pic\
	    ${TOTAL_STEPS}\
	    1000\
	    ${TOTAL_PARTICLES}\
	    0 1\
	    SINUSOIDAL
    echo "###################################"
    echo "LINEAR" >&2
    time mpiexec -n ${SLURM_NNODES}\
	    ./pic\
	    ${TOTAL_STEPS}\
	    1000\
	    ${TOTAL_PARTICLES}\
	    1 0\
	    LINEAR\
	    1.0\
	    3.0
    echo "###################################"
    echo "PATCH" >&2
    time mpiexec -n ${SLURM_NNODES}\
	    ./pic\
	    ${TOTAL_STEPS}\
	    1000\
	    ${TOTAL_PARTICLES}\
	    1 0\
	    PATCH\
	    0\
	    200\
	    100\
	    200
done
#+end_src

*** Assemble Slurm files for weak scaling and copy files

**** 1 node

#+begin_src bash :dir pic-c-st/1/ :mkdirp yes
ln -sf ~/RustMPIExperiments/Kernels/MPI1/PIC-static/pic .
#+end_src

#+RESULTS:


#+begin_src bash :shebang #!/bin/bash :tangle pic-c-st/1/run.slurm :mkdirp yes :noweb yes
<<header>>
#SBATCH --nodes 1
<<piccs-name>>
<<kura-fix>>
<<modules>>
source /work/casch/spack/share/spack/setup-env.sh
spack env activate rustdev
<<piccs-command>>
#+end_src

**** 2 nodes

#+begin_src bash :dir pic-c-st/2/ :mkdirp yes
ln -sf ~/RustMPIExperiments/Kernels/MPI1/PIC-static/pic .
#+end_src

#+RESULTS:


#+begin_src bash :shebang #!/bin/bash :tangle pic-c-st/2/run.slurm :mkdirp yes :noweb yes
<<header>>
#SBATCH --nodes 2
<<piccs-name>>
<<kura-fix>>
<<modules>>
source /work/casch/spack/share/spack/setup-env.sh
spack env activate rustdev
<<piccs-command>>
#+end_src

**** 4 nodes

#+begin_src bash :dir pic-c-st/4/ :mkdirp yes
ln -sf ~/RustMPIExperiments/Kernels/MPI1/PIC-static/pic .
#+end_src

#+RESULTS:


#+begin_src bash :shebang #!/bin/bash :tangle pic-c-st/4/run.slurm :mkdirp yes :noweb yes
<<header>>
#SBATCH --nodes 4
<<piccs-name>>
<<kura-fix>>
<<modules>>
source /work/casch/spack/share/spack/setup-env.sh
spack env activate rustdev
<<piccs-command>>
#+end_src

**** 8 nodes

#+begin_src bash :dir pic-c-st/8/ :mkdirp yes
ln -sf ~/RustMPIExperiments/Kernels/MPI1/PIC-static/pic .
#+end_src

#+RESULTS:


#+begin_src bash :shebang #!/bin/bash :tangle pic-c-st/8/run.slurm :mkdirp yes :noweb yes
<<header>>
#SBATCH --nodes 8
<<piccs-name>>
<<kura-fix>>
<<modules>>
source /work/casch/spack/share/spack/setup-env.sh
spack env activate rustdev
<<piccs-command>>
#+end_src

**** 12 nodes

#+begin_src bash :dir pic-c-st/12/ :mkdirp yes
ln -sf ~/RustMPIExperiments/Kernels/MPI1/PIC-static/pic .
#+end_src

#+RESULTS:


#+begin_src bash :shebang #!/bin/bash :tangle pic-c-st/12/run.slurm :mkdirp yes :noweb yes
<<header>>
#SBATCH --nodes 12
<<piccs-name>>
<<kura-fix>>
<<modules>>
source /work/casch/spack/share/spack/setup-env.sh
spack env activate rustdev
<<piccs-command>>
#+end_src

** PIC RUST Weak Scaling

*** Job Name
#+begin_src bash :noweb-ref picrw-name
#SBATCH --job-name pic-r-ws
#+end_src

*** Execution commands

#+begin_src bash :noweb-ref picrw-command
export RAYON_NUM_THREADS=${SLURM_NTASKS_PER_NODE}
REPETITIONS=10
TOTAL_STEPS=100
TOTAL_PARTICLES=$((${SLURM_NNODES}*102400))
for (( i = 0; i < ${REPETITIONS}; i++))
do
    echo "~rep: ${i}~" >&2
    echo "GEOMETRIC" >&2
    time mpiexec -n ${SLURM_NNODES}\
	 ./pic-mpi\
	 -i ${TOTAL_STEPS}\
	 -g 1000\
	 -t ${TOTAL_PARTICLES}\
	 -p 1 -v 2\
	 geometric\
	 -a 0.99
    echo "###################################"
    echo "SINUSOIDAL" >&2
    time mpiexec -n ${SLURM_NNODES}\
	 ./pic-mpi\
	 -i ${TOTAL_STEPS}\
	 -g 1000\
	 -t ${TOTAL_PARTICLES}\
	 -p 0 -v 1\
	 sinusoidal
    echo "###################################"
    echo "LINEAR" >&2
    time mpiexec -n ${SLURM_NNODES}\
	 ./pic-mpi\
	 -i ${TOTAL_STEPS}\
	 -g 1000\
	 -t ${TOTAL_PARTICLES}\
	 -p 1 -v 0\
	 linear\
	 -n 1.0\
	 -c 3.0
    echo "###################################"
    echo "PATCH" >&2
    time mpiexec -n ${SLURM_NNODES}\
	 ./pic-mpi\
	 -i ${TOTAL_STEPS}\
	 -g 1000\
	 -t ${TOTAL_PARTICLES}\
	 -p 1 -v 0\
	 patch\
	 --xleft 0 --xright 200\
	 --ybottom 100 --ytop 200
done
#+end_src

*** Assemble Slurm files for weak scaling and copy files

**** 1 node

#+begin_src bash :shebang #!/bin/bash :tangle pic-r-wk/1/run.slurm :mkdirp yes :noweb yes
<<header>>
#SBATCH --nodes 1
<<picrw-name>>
<<kura-fix>>
<<modules>>
source /work/casch/spack/share/spack/setup-env.sh
spack env activate rustdev
<<picrw-command>>
#+end_src

**** 2 nodes

#+begin_src bash :shebang #!/bin/bash :tangle pic-r-wk/2/run.slurm :mkdirp yes :noweb yes
<<header>>
#SBATCH --nodes 2
<<picrw-name>>
<<kura-fix>>
<<modules>>
source /work/casch/spack/share/spack/setup-env.sh
spack env activate rustdev
<<picrw-command>>
#+end_src

**** 4 nodes

#+begin_src bash :shebang #!/bin/bash :tangle pic-r-wk/4/run.slurm :mkdirp yes :noweb yes
<<header>>
#SBATCH --nodes 4
<<picrw-name>>
<<kura-fix>>
<<modules>>
source /work/casch/spack/share/spack/setup-env.sh
spack env activate rustdev
<<picrw-command>>
#+end_src

**** 8 nodes

#+begin_src bash :shebang #!/bin/bash :tangle pic-r-wk/8/run.slurm :mkdirp yes :noweb yes
<<header>>
#SBATCH --nodes 8
<<picrw-name>>
<<kura-fix>>
<<modules>>
source /work/casch/spack/share/spack/setup-env.sh
spack env activate rustdev
<<picrw-command>>
#+end_src

**** 12 nodes

#+begin_src bash :shebang #!/bin/bash :tangle pic-r-wk/12/run.slurm :mkdirp yes :noweb yes
<<header>>
#SBATCH --nodes 12
<<picrw-name>>
<<kura-fix>>
<<modules>>
source /work/casch/spack/share/spack/setup-env.sh
spack env activate rustdev
<<picrw-command>>
#+end_src

** PIC RUST Strong Scaling

*** Job Name
#+begin_src bash :noweb-ref picrs-name
#SBATCH --job-name pic-r-st
#+end_src

*** Execution commands

#+begin_src bash :noweb-ref picrs-command
export RAYON_NUM_THREADS=${SLURM_NTASKS_PER_NODE}
REPETITIONS=10
TOTAL_STEPS=100
TOTAL_PARTICLES=$((12*102400))
for (( i = 0; i < ${REPETITIONS}; i++))
do
    echo "~rep: ${i}~" >&2
    echo "GEOMETRIC" >&2
    time mpiexec -n ${SLURM_NNODES}\
	 ./pic-mpi\
	 -i ${TOTAL_STEPS}\
	 -g 1000\
	 -t ${TOTAL_PARTICLES}\
	 -p 1 -v 2\
	 geometric\
	 -a 0.99
    echo "###################################"
    echo "SINUSOIDAL" >&2
    time mpiexec -n ${SLURM_NNODES}\
	 ./pic-mpi\
	 -i ${TOTAL_STEPS}\
	 -g 1000\
	 -t ${TOTAL_PARTICLES}\
	 -p 0 -v 1\
	 sinusoidal
    echo "###################################"
    echo "LINEAR" >&2
    time mpiexec -n ${SLURM_NNODES}\
	 ./pic-mpi\
	 -i ${TOTAL_STEPS}\
	 -g 1000\
	 -t ${TOTAL_PARTICLES}\
	 -p 1 -v 0\
	 linear\
	 -n 1.0\
	 -c 3.0
    echo "###################################"
    echo "PATCH" >&2
    time mpiexec -n ${SLURM_NNODES}\
	 ./pic-mpi\
	 -i ${TOTAL_STEPS}\
	 -g 1000\
	 -t ${TOTAL_PARTICLES}\
	 -p 1 -v 0\
	 patch\
	 --xleft 0 --xright 200\
	 --ybottom 100 --ytop 200
done
#+end_src

*** Assemble Slurm files for weak scaling and copy files

**** 1 node

#+begin_src bash :shebang #!/bin/bash :tangle pic-r-st/1/run.slurm :mkdirp yes :noweb yes
<<header>>
#SBATCH --nodes 1
<<picrs-name>>
<<kura-fix>>
<<modules>>
source /work/casch/spack/share/spack/setup-env.sh
spack env activate rustdev
<<picrs-command>>
#+end_src

**** 2 nodes

#+begin_src bash :shebang #!/bin/bash :tangle pic-r-st/2/run.slurm :mkdirp yes :noweb yes
<<header>>
#SBATCH --nodes 2
<<picrs-name>>
<<kura-fix>>
<<modules>>
source /work/casch/spack/share/spack/setup-env.sh
spack env activate rustdev
<<picrs-command>>
#+end_src

**** 4 nodes

#+begin_src bash :shebang #!/bin/bash :tangle pic-r-st/4/run.slurm :mkdirp yes :noweb yes
<<header>>
#SBATCH --nodes 4
<<picrs-name>>
<<kura-fix>>
<<modules>>
source /work/casch/spack/share/spack/setup-env.sh
spack env activate rustdev
<<picrs-command>>
#+end_src

**** 8 nodes

#+begin_src bash :shebang #!/bin/bash :tangle pic-r-st/8/run.slurm :mkdirp yes :noweb yes
<<header>>
#SBATCH --nodes 8
<<picrs-name>>
<<kura-fix>>
<<modules>>
source /work/casch/spack/share/spack/setup-env.sh
spack env activate rustdev
<<picrs-command>>
#+end_src

**** 12 nodes

#+begin_src bash :shebang #!/bin/bash :tangle pic-r-st/12/run.slurm :mkdirp yes :noweb yes
<<header>>
#SBATCH --nodes 12
<<picrs-name>>
<<kura-fix>>
<<modules>>
source /work/casch/spack/share/spack/setup-env.sh
spack env activate rustdev
<<picrs-command>>
#+end_src

* Submit experiments
** BS-SOLCTRA MPI+OpenMP Weak Scaling
*** 1 node

#+begin_src bash :dir sol-mpi-wk/1
rm -rf results_* *.err *.out stats.csv stdout*
ln -sf ~/RustMPIExperiments/bs-solctra-implementations/input_big.txt .
ln -sf ~/RustMPIExperiments/bs-solctra-implementations/resources .
ln -sf ~/RustMPIExperiments/bs-solctra-implementations/results/bs-solctra-multinode .
sbatch run.slurm
#+end_src

#+RESULTS:
: Submitted batch job 235385

*** 2 nodes

#+begin_src bash :dir sol-mpi-wk/2
rm -rf results_* *.err *.out stats.csv stdout*
ln -sf ~/RustMPIExperiments/bs-solctra-implementations/input_big.txt .
ln -sf ~/RustMPIExperiments/bs-solctra-implementations/resources .
ln -sf ~/RustMPIExperiments/bs-solctra-implementations/results/bs-solctra-multinode .
sbatch run.slurm
#+end_src

#+RESULTS:
: Submitted batch job 235386

*** 4 nodes

#+begin_src bash :dir sol-mpi-wk/4
rm -rf results_* *.err *.out stats.csv stdout*
ln -sf ~/RustMPIExperiments/bs-solctra-implementations/input_big.txt .
ln -sf ~/RustMPIExperiments/bs-solctra-implementations/resources .
ln -sf ~/RustMPIExperiments/bs-solctra-implementations/results/bs-solctra-multinode .
sbatch run.slurm
#+end_src

#+RESULTS:
: Submitted batch job 235387

*** 8 nodes

#+begin_src bash :dir sol-mpi-wk/8
rm -rf results_* *.err *.out stats.csv stdout*
ln -sf ~/RustMPIExperiments/bs-solctra-implementations/input_big.txt .
ln -sf ~/RustMPIExperiments/bs-solctra-implementations/resources .
ln -sf ~/RustMPIExperiments/bs-solctra-implementations/results/bs-solctra-multinode .
sbatch run.slurm
#+end_src

#+RESULTS:
: Submitted batch job 235388

*** 12 nodes
#+begin_src bash :dir sol-mpi-wk/12
rm -rf results_* *.err *.out stats.csv stdout*
ln -sf ~/RustMPIExperiments/bs-solctra-implementations/input_big.txt .
ln -sf ~/RustMPIExperiments/bs-solctra-implementations/resources .
ln -sf ~/RustMPIExperiments/bs-solctra-implementations/results/bs-solctra-multinode .
sbatch run.slurm
#+end_src

#+RESULTS:
: Submitted batch job 235389

** BS-SOLCTRA MPI+OpenMP Strong Scaling

*** 1 node

#+begin_src bash :dir sol-mpi-st/1
rm -rf results_* *.err *.out stats.csv stdout*
ln -sf ~/RustMPIExperiments/bs-solctra-implementations/input_big.txt .
ln -sf ~/RustMPIExperiments/bs-solctra-implementations/resources .
ln -sf ~/RustMPIExperiments/bs-solctra-implementations/results/bs-solctra-multinode .
sbatch run.slurm
#+end_src

#+RESULTS:
: Submitted batch job 235391

*** 2 nodes

#+begin_src bash :dir sol-mpi-st/2
rm -rf results_* *.err *.out stats.csv stdout*
ln -sf ~/RustMPIExperiments/bs-solctra-implementations/input_big.txt .
ln -sf ~/RustMPIExperiments/bs-solctra-implementations/resources .
ln -sf ~/RustMPIExperiments/bs-solctra-implementations/results/bs-solctra-multinode .
sbatch run.slurm
#+end_src

#+RESULTS:
: Submitted batch job 235392

*** 4 nodes

#+begin_src bash :dir sol-mpi-st/4
rm -rf results_* *.err *.out stats.csv stdout*
ln -sf ~/RustMPIExperiments/bs-solctra-implementations/input_big.txt .
ln -sf ~/RustMPIExperiments/bs-solctra-implementations/resources .
ln -sf ~/RustMPIExperiments/bs-solctra-implementations/results/bs-solctra-multinode .
sbatch run.slurm
#+end_src

#+RESULTS:
: Submitted batch job 235393

*** 8 nodes

#+begin_src bash :dir sol-mpi-st/8
rm -rf results_* *.err *.out stats.csv stdout*
ln -sf ~/RustMPIExperiments/bs-solctra-implementations/input_big.txt .
ln -sf ~/RustMPIExperiments/bs-solctra-implementations/resources .
ln -sf ~/RustMPIExperiments/bs-solctra-implementations/results/bs-solctra-multinode .
sbatch run.slurm
#+end_src

#+RESULTS:
: Submitted batch job 235394

*** 12 nodes

#+begin_src bash :dir sol-mpi-st/12
rm -rf results_* *.err *.out stats.csv stdout*
ln -sf ~/RustMPIExperiments/bs-solctra-implementations/input_big.txt .
ln -sf ~/RustMPIExperiments/bs-solctra-implementations/resources .
ln -sf ~/RustMPIExperiments/bs-solctra-implementations/results/bs-solctra-multinode .
sbatch run.slurm
#+end_src

#+RESULTS:
: Submitted batch job 235395

** BS-SOLCTRA Rust MPI+Rayon Weak Scaling
*** 1 node

#+begin_src bash :dir sol-rst-wk/1
rm -r results_* *.err *.out
ln -sf ~/RustMPIExperiments/bs-solctra-mpi-rs/tests/test-resources/input_1000.csv .
ln -sf ~/RustMPIExperiments/bs-solctra-mpi-rs/tests/test-resources/resources .
ln -sf ~/RustMPIExperiments/bs-solctra-mpi-rs/target/release/bs-solctra-rs .
sbatch run.slurm
#+end_src

#+RESULTS:
: Submitted batch job 235369

*** 2 nodes

#+begin_src bash :dir sol-rst-wk/2
rm -r results_* *.err *.out
ln -sf ~/RustMPIExperiments/bs-solctra-mpi-rs/tests/test-resources/input_1000.csv .
ln -sf ~/RustMPIExperiments/bs-solctra-mpi-rs/tests/test-resources/resources .
ln -sf ~/RustMPIExperiments/bs-solctra-mpi-rs/target/release/bs-solctra-rs .
sbatch run.slurm
#+end_src

#+RESULTS:
: Submitted batch job 235370

*** 4 nodes

#+begin_src bash :dir sol-rst-wk/4
rm -r results_* *.err *.out
ln -sf ~/RustMPIExperiments/bs-solctra-mpi-rs/tests/test-resources/input_1000.csv .
ln -sf ~/RustMPIExperiments/bs-solctra-mpi-rs/tests/test-resources/resources .
ln -sf ~/RustMPIExperiments/bs-solctra-mpi-rs/target/release/bs-solctra-rs .
sbatch run.slurm
#+end_src

#+RESULTS:
: Submitted batch job 235371

*** 8 nodes

#+begin_src bash :dir sol-rst-wk/8
rm -r results_* *.err *.out
ln -sf ~/RustMPIExperiments/bs-solctra-mpi-rs/tests/test-resources/input_1000.csv .
ln -sf ~/RustMPIExperiments/bs-solctra-mpi-rs/tests/test-resources/resources .
ln -sf ~/RustMPIExperiments/bs-solctra-mpi-rs/target/release/bs-solctra-rs .
sbatch run.slurm
#+end_src

#+RESULTS:
: Submitted batch job 235372

*** 12 nodes

#+begin_src bash :dir sol-rst-wk/12
rm -r results_* *.err *.out
ln -sf ~/RustMPIExperiments/bs-solctra-mpi-rs/tests/test-resources/input_1000.csv .
ln -sf ~/RustMPIExperiments/bs-solctra-mpi-rs/tests/test-resources/resources .
ln -sf ~/RustMPIExperiments/bs-solctra-mpi-rs/target/release/bs-solctra-rs .
sbatch run.slurm
#+end_src

#+RESULTS:
: Submitted batch job 235373

** BS-SOLCTRA Rust MPI+Rayon Strong Scaling
*** 1 node

#+begin_src bash :dir sol-rst-st/1
rm -r results_* *.err *.out
ln -sf ~/RustMPIExperiments/bs-solctra-mpi-rs/tests/test-resources/input_1000.csv .
ln -sf ~/RustMPIExperiments/bs-solctra-mpi-rs/tests/test-resources/resources .
ln -sf ~/RustMPIExperiments/bs-solctra-mpi-rs/target/release/bs-solctra-rs .
sbatch run.slurm
#+end_src

#+RESULTS:
: Submitted batch job 235374

*** 2 nodes

#+begin_src bash :dir sol-rst-st/2
rm -r results_* *.err *.out
ln -sf ~/RustMPIExperiments/bs-solctra-mpi-rs/tests/test-resources/input_1000.csv .
ln -sf ~/RustMPIExperiments/bs-solctra-mpi-rs/tests/test-resources/resources .
ln -sf ~/RustMPIExperiments/bs-solctra-mpi-rs/target/release/bs-solctra-rs .
sbatch run.slurm
#+end_src

#+RESULTS:
: Submitted batch job 235375

*** 4 nodes
#+begin_src bash :dir sol-rst-st/4
rm -r results_* *.err *.out
ln -sf ~/RustMPIExperiments/bs-solctra-mpi-rs/tests/test-resources/input_1000.csv .
ln -sf ~/RustMPIExperiments/bs-solctra-mpi-rs/tests/test-resources/resources .
ln -sf ~/RustMPIExperiments/bs-solctra-mpi-rs/target/release/bs-solctra-rs .
sbatch run.slurm
#+end_src

#+RESULTS:
: Submitted batch job 235376

*** 8 nodes

#+begin_src bash :dir sol-rst-st/8
rm -r results_* *.err *.out
ln -sf ~/RustMPIExperiments/bs-solctra-mpi-rs/tests/test-resources/input_1000.csv .
ln -sf ~/RustMPIExperiments/bs-solctra-mpi-rs/tests/test-resources/resources .
ln -sf ~/RustMPIExperiments/bs-solctra-mpi-rs/target/release/bs-solctra-rs .
sbatch run.slurm
#+end_src

#+RESULTS:
: Submitted batch job 235377

*** 12 nodes

#+begin_src bash :dir sol-rst-st/12
rm -r results_* *.err *.out
ln -sf ~/RustMPIExperiments/bs-solctra-mpi-rs/tests/test-resources/input_1000.csv .
ln -sf ~/RustMPIExperiments/bs-solctra-mpi-rs/tests/test-resources/resources .
ln -sf ~/RustMPIExperiments/bs-solctra-mpi-rs/target/release/bs-solctra-rs .
sbatch run.slurm
#+end_src

#+RESULTS:
: Submitted batch job 235378

** PIC C Weak Scaling

*** 1 node

#+begin_src bash :dir pic-c-wk/1
rm *.err *.out
ln -sf ~/RustMPIExperiments/Kernels/MPI1/PIC-static/pic .
sbatch run.slurm
#+end_src

#+RESULTS:
: Submitted batch job 235174

*** 2 nodes

#+begin_src bash :dir pic-c-wk/2
rm *.err *.out
ln -sf ~/RustMPIExperiments/Kernels/MPI1/PIC-static/pic .
sbatch run.slurm
#+end_src

#+RESULTS:
: Submitted batch job 235175

*** 4 nodes

#+begin_src bash :dir pic-c-wk/4
rm *.err *.out
ln -sf ~/RustMPIExperiments/Kernels/MPI1/PIC-static/pic .
sbatch run.slurm
#+end_src

#+RESULTS:
: Submitted batch job 235176

*** 8 nodes

#+begin_src bash :dir pic-c-wk/8
rm *.err *.out
ln -sf ~/RustMPIExperiments/Kernels/MPI1/PIC-static/pic .
sbatch run.slurm
#+end_src

#+RESULTS:
: Submitted batch job 235177

*** 12 nodes
#+begin_src bash :dir pic-c-wk/12
rm *.err *.out
ln -sf ~/RustMPIExperiments/Kernels/MPI1/PIC-static/pic .
sbatch run.slurm
#+end_src

#+RESULTS:
: Submitted batch job 235178

** PIC C Strong Scaling

*** 1 node

#+begin_src bash :dir pic-c-st/1
rm *.err *.out
ln -sf ~/RustMPIExperiments/Kernels/MPI1/PIC-static/pic .
sbatch run.slurm
#+end_src

#+RESULTS:
: Submitted batch job 235169

*** 2 nodes

#+begin_src bash :dir pic-c-st/2
rm *.err *.out
ln -sf ~/RustMPIExperiments/Kernels/MPI1/PIC-static/pic .
sbatch run.slurm
#+end_src

#+RESULTS:
: Submitted batch job 235170

*** 4 nodes

#+begin_src bash :dir pic-c-st/4
rm *.err *.out
ln -sf ~/RustMPIExperiments/Kernels/MPI1/PIC-static/pic .
sbatch run.slurm
#+end_src

#+RESULTS:
: Submitted batch job 235171

*** 8 nodes

#+begin_src bash :dir pic-c-st/8
rm *.err *.out
ln -sf ~/RustMPIExperiments/Kernels/MPI1/PIC-static/pic .
sbatch run.slurm
#+end_src

#+RESULTS:
: Submitted batch job 235172

*** 12 nodes

#+begin_src bash :dir pic-c-st/12
rm *.err *.out
ln -sf ~/RustMPIExperiments/Kernels/MPI1/PIC-static/pic .
sbatch run.slurm
#+end_src

#+RESULTS:
: Submitted batch job 235173

** PIC RUST Weak Scaling

*** 1 node

#+begin_src bash :dir pic-r-wk/1
rm *.err *.out
ln -sf ~/RustMPIExperiments/Kernels/RUST/pic-mpi/target/release/pic-mpi .
sbatch run.slurm
#+end_src

#+RESULTS:
: Submitted batch job 235179

*** 2 nodes

#+begin_src bash :dir pic-r-wk/2
rm *.err *.out
ln -sf ~/RustMPIExperiments/Kernels/RUST/pic-mpi/target/release/pic-mpi .
sbatch run.slurm
#+end_src

#+RESULTS:
: Submitted batch job 235180

*** 4 nodes

#+begin_src bash :dir pic-r-wk/4
rm *.err *.out
ln -sf ~/RustMPIExperiments/Kernels/RUST/pic-mpi/target/release/pic-mpi .
sbatch run.slurm
#+end_src

#+RESULTS:
: Submitted batch job 235181

*** 8 nodes

#+begin_src bash :dir pic-r-wk/8
rm *.err *.out
ln -sf ~/RustMPIExperiments/Kernels/RUST/pic-mpi/target/release/pic-mpi .
sbatch run.slurm
#+end_src

#+RESULTS:
: Submitted batch job 235182

*** 12 nodes
#+begin_src bash :dir pic-r-wk/12
rm *.err *.out
ln -sf ~/RustMPIExperiments/Kernels/RUST/pic-mpi/target/release/pic-mpi .
sbatch run.slurm
#+end_src

#+RESULTS:
: Submitted batch job 235184

** PIC RUST Strong Scaling

*** 1 node

#+begin_src bash :dir pic-r-st/1
rm *.err *.out
ln -sf ~/RustMPIExperiments/Kernels/RUST/pic-mpi/target/release/pic-mpi .
sbatch run.slurm
#+end_src

#+RESULTS:
: Submitted batch job 235162

*** 2 nodes

#+begin_src bash :dir pic-r-st/2
rm *.err *.out
ln -sf ~/RustMPIExperiments/Kernels/RUST/pic-mpi/target/release/pic-mpi .
sbatch run.slurm
#+end_src

#+RESULTS:
: Submitted batch job 235164

*** 4 nodes

#+begin_src bash :dir pic-r-st/4
rm *.err *.out
ln -sf ~/RustMPIExperiments/Kernels/RUST/pic-mpi/target/release/pic-mpi .
sbatch run.slurm
#+end_src

#+RESULTS:
: Submitted batch job 235165

*** 8 nodes

#+begin_src bash :dir pic-r-st/8
rm *.err *.out
ln -sf ~/RustMPIExperiments/Kernels/RUST/pic-mpi/target/release/pic-mpi .
sbatch run.slurm
#+end_src

#+RESULTS:
: Submitted batch job 235166

*** 12 nodes
#+begin_src bash :dir pic-r-st/12
rm *.err *.out
ln -sf ~/RustMPIExperiments/Kernels/RUST/pic-mpi/target/release/pic-mpi .
sbatch run.slurm
#+end_src
pppp
#+RESULTS:
: Submitted batch job 235167

* Results
** BS-SOLCTRA weak scaling

#+begin_src bash :dir sol-mpi-wk
cat */stats.csv | awk -F ',' ' {print "c++," $2/256 "," $2 "," $6} ' > results.csv
#+end_src

#+RESULTS:

#+begin_src bash :dir sol-rst-wk
cat */solc-rust-ws_*.err | csplit - '/.*Starting.*/' '{*}' -s
grep -e "Total" -e "Simulation" xx* | awk -F ']' ' { print $2 } ' > results_partial.out
rm xx*
csplit results_partial.out '/Total.*/' '{*}' -s
rm results_partial.out
FILES=`ls xx*`
for file in $FILES
do
    awk -F ':' ' { print $2 } ' $file | tr '\n' , | awk -F ',' ' { print "rust," $1 "," $1 * 256 "," $2 } ' >> results.csv
done
sed -i 's/\ //g' results.csv
rm xx*
#+end_src

#+RESULTS:

#+begin_src bash
cat sol-mpi-wk/results.csv sol-rst-wk/results.csv > solctra_weak.csv
#+end_src

#+RESULTS:

** BS-SOLCTRA Strong scaling
#+begin_src bash :dir sol-mpi-st
cat */*.out | csplit - '/.*Communicator.*/' '{*}' -s
FILES=`ls xx*`
rm -f results.csv
for file in $FILES
do
    grep -e "Communicator" -e "Particles=" -e "Total" $file | awk -F '=' ' { print $2 } ' \
	| sed -e 's/\[//' -e 's/]\.//' | tr '\n' , | awk -F ',' ' { print "c++," $1 "," $2 "," $3 } ' >> results.csv
done
# | awk -F '=' ' { print $2 } ' | sed -e 's/\[//' -e 's/\]//' -e 's/\.//'
rm xx*
#+end_src

#+RESULTS:
| c++ | 12 | 3072 | 55.047 |
| c++ | 12 | 3072 | 55.145 |
| c++ | 12 | 3072 |  55.01 |
| c++ | 12 | 3072 | 55.084 |
| c++ | 12 | 3072 | 55.098 |
| c++ | 12 | 3072 | 55.071 |
| c++ | 12 | 3072 | 55.126 |
| c++ | 12 | 3072 | 55.142 |
| c++ | 12 | 3072 | 55.037 |
| c++ | 12 | 3072 | 55.144 |
| c++ |  1 | 3072 | 24.241 |
| c++ |  1 | 3072 | 24.081 |
| c++ |  1 | 3072 | 24.968 |
| c++ |  1 | 3072 | 24.222 |
| c++ |  1 | 3072 | 24.166 |
| c++ |  1 | 3072 | 24.214 |
| c++ |  1 | 3072 | 24.249 |
| c++ |  1 | 3072 | 24.212 |
| c++ |  1 | 3072 | 24.317 |
| c++ |  1 | 3072 | 24.194 |
| c++ |  2 | 3072 | 24.507 |
| c++ |  2 | 3072 |  24.56 |
| c++ |  2 | 3072 | 25.115 |
| c++ |  2 | 3072 | 24.447 |
| c++ |  2 | 3072 | 24.414 |
| c++ |  2 | 3072 | 25.117 |
| c++ |  2 | 3072 | 24.486 |
| c++ |  2 | 3072 | 24.519 |
| c++ |  2 | 3072 | 24.531 |
| c++ |  2 | 3072 | 24.584 |
| c++ |  4 | 3072 | 32.078 |
| c++ |  4 | 3072 | 32.198 |
| c++ |  4 | 3072 | 32.116 |
| c++ |  4 | 3072 | 32.113 |
| c++ |  4 | 3072 | 32.208 |
| c++ |  4 | 3072 | 32.115 |
| c++ |  4 | 3072 | 32.226 |
| c++ |  4 | 3072 |  32.16 |
| c++ |  4 | 3072 | 32.258 |
| c++ |  4 | 3072 | 32.094 |
| c++ |  8 | 3072 |  43.71 |
| c++ |  8 | 3072 | 43.651 |
| c++ |  8 | 3072 | 43.542 |
| c++ |  8 | 3072 | 43.672 |
| c++ |  8 | 3072 | 43.649 |
| c++ |  8 | 3072 | 44.033 |
| c++ |  8 | 3072 | 43.622 |
| c++ |  8 | 3072 | 43.917 |
| c++ |  8 | 3072 | 44.219 |
| c++ |  8 | 3072 | 43.739 |

#+begin_src bash :dir sol-rst-st
cat */solc-rust-st_*.err | csplit - '/.*Starting.*/' '{*}' -s
grep -e "Total" -e "Simulation" xx* | awk -F ']' ' { print $2 } ' > results_partial.out
rm xx*
csplit results_partial.out '/Total.*/' '{*}' -s
rm results_partial.out
FILES=`ls xx*`
rm -f results.csv
for file in $FILES
do
    awk -F ':' ' { print $2 } ' $file | tr '\n' , | awk -F ',' ' { print "rust," $1 "," 12*256 "," $2 } ' >> results.csv
done
sed -i 's/\ //g' results.csv
rm xx*
#+end_src

#+RESULTS:

#+begin_src bash
cat sol-mpi-st/results.csv sol-rst-st/results.csv > solctra_strong.csv
#+end_src

#+RESULTS:

** PIC Weak scaling
#+begin_src bash :dir pic-c-wk
cat */*.out | csplit - '/.*#.*/' '{*}' -s
FILES=`ls xx*`
rm -f results.csv
for file in $FILES
do
cat $file | tr ':' '=' | grep -e "Number of ranks" -e "Number of particles requested" -e "Rate" -e "Initialization mode" \
     | awk -F '=' ' { print $2 } ' | tr '\n' ',' | awk -F ',' ' { print "c++," $1 "," $2 "," $3 "," $4 } ' >> results.csv
done
rm xx*
#+end_src

#+RESULTS:
| c++ | 12 | 1228800 | GEOMETRIC  |   66.86275 |
| c++ | 12 | 1228800 | SINUSOIDAL |  90.192776 |
| c++ | 12 | 1228800 | LINEAR     | 141.095721 |
| c++ | 12 | 1228800 | PATCH      |  16.191386 |
| c++ | 12 | 1228800 | SINUSOIDAL |  90.030752 |
| c++ | 12 | 1228800 | LINEAR     |   139.7803 |
| c++ | 12 | 1228800 | PATCH      |  16.090979 |
| c++ | 12 | 1228800 | SINUSOIDAL |  90.503641 |
| c++ | 12 | 1228800 | LINEAR     | 141.571221 |
| c++ | 12 | 1228800 | PATCH      |  15.754827 |
| c++ | 12 | 1228800 | SINUSOIDAL |  89.957074 |
| c++ |  4 |  409600 | SINUSOIDAL |  40.358838 |
| c++ |  4 |  409600 | LINEAR     |  56.064969 |
| c++ |  4 |  409600 | PATCH      |  14.879947 |
| c++ |  4 |  409600 | SINUSOIDAL |  40.470774 |
| c++ |  4 |  409600 | LINEAR     |  55.985343 |
| c++ |  4 |  409600 | PATCH      |  14.878602 |
| c++ |  4 |  409600 | SINUSOIDAL |  40.409523 |
| c++ |  4 |  409600 | LINEAR     |  54.536537 |
| c++ |  4 |  409600 | PATCH      |  14.800129 |
| c++ |  4 |  409600 | SINUSOIDAL |  40.325532 |
| c++ | 12 | 1228800 | LINEAR     | 141.988483 |
| c++ |  4 |  409600 | LINEAR     |  56.034859 |
| c++ |  4 |  409600 | PATCH      |  14.891361 |
| c++ |  4 |  409600 | SINUSOIDAL |  40.319181 |
| c++ |  4 |  409600 | LINEAR     |  55.400389 |
| c++ |  4 |  409600 | PATCH      |  14.767155 |
| c++ |  4 |  409600 | SINUSOIDAL |  40.125712 |
| c++ |  4 |  409600 | LINEAR     |  55.892459 |
| c++ |  4 |  409600 | PATCH      |   14.85887 |
| c++ |  4 |  409600 | SINUSOIDAL |  40.280451 |
| c++ |  4 |  409600 | LINEAR     |  55.989901 |
| c++ | 12 | 1228800 | PATCH      |  16.098171 |
| c++ |  4 |  409600 | PATCH      |  14.876081 |
| c++ |  8 |  819200 | SINUSOIDAL |  83.369505 |
| c++ |  8 |  819200 | LINEAR     | 105.788652 |
| c++ |  8 |  819200 | PATCH      |  14.781421 |
| c++ |  8 |  819200 | SINUSOIDAL |  83.451466 |
| c++ |  8 |  819200 | LINEAR     | 108.896163 |
| c++ |  8 |  819200 | PATCH      |  14.826931 |
| c++ |  8 |  819200 | SINUSOIDAL |  83.367698 |
| c++ |  8 |  819200 | LINEAR     | 108.778971 |
| c++ |  8 |  819200 | PATCH      |  14.745984 |
| c++ | 12 | 1228800 | SINUSOIDAL |   91.00673 |
| c++ |  8 |  819200 | SINUSOIDAL |  82.887961 |
| c++ |  8 |  819200 | LINEAR     | 106.847953 |
| c++ |  8 |  819200 | PATCH      |  14.694501 |
| c++ |  8 |  819200 | SINUSOIDAL |  83.417453 |
| c++ |  8 |  819200 | LINEAR     | 108.806677 |
| c++ |  8 |  819200 | PATCH      |  14.837949 |
| c++ |  8 |  819200 | SINUSOIDAL |  83.064559 |
| c++ |  8 |  819200 | LINEAR     | 108.250785 |
| c++ |  8 |  819200 | PATCH      |  14.740648 |
| c++ |  8 |  819200 | SINUSOIDAL |  82.426194 |
| c++ | 12 | 1228800 | LINEAR     | 142.315138 |
| c++ |  8 |  819200 | LINEAR     | 107.036087 |
| c++ |  8 |  819200 | PATCH      |  14.802371 |
| c++ |  8 |  819200 | SINUSOIDAL |  82.278846 |
| c++ |  8 |  819200 | LINEAR     | 107.290868 |
| c++ |  8 |  819200 | PATCH      |  14.782984 |
| c++ |  8 |  819200 | SINUSOIDAL |  82.052593 |
| c++ |  8 |  819200 | LINEAR     | 108.052719 |
| c++ |  8 |  819200 | PATCH      |  14.777021 |
| c++ |  8 |  819200 | SINUSOIDAL |  84.008589 |
| c++ |  8 |  819200 | LINEAR     |  106.70253 |
| c++ | 12 | 1228800 | PATCH      |  16.095654 |
| c++ |  8 |  819200 | PATCH      |  14.692914 |
| c++ | 12 | 1228800 | SINUSOIDAL |  91.424842 |
| c++ | 12 | 1228800 | LINEAR     | 145.420524 |
| c++ | 12 | 1228800 | PATCH      |    16.2243 |
| c++ | 12 | 1228800 | SINUSOIDAL |  91.491789 |
| c++ | 12 | 1228800 | LINEAR     | 142.117754 |
| c++ | 12 | 1228800 | PATCH      |  16.119066 |
| c++ | 12 | 1228800 | SINUSOIDAL |  86.434492 |
| c++ | 12 | 1228800 | LINEAR     | 144.566125 |
| c++ | 12 | 1228800 | PATCH      |  15.996428 |
| c++ | 12 | 1228800 | SINUSOIDAL |   91.12369 |
| c++ | 12 | 1228800 | LINEAR     | 142.498535 |
| c++ | 12 | 1228800 | PATCH      |  15.985487 |
| c++ | 12 | 1228800 | SINUSOIDAL |  91.222128 |
| c++ | 12 | 1228800 | LINEAR     | 143.783011 |
| c++ | 12 | 1228800 | PATCH      |  15.970201 |
| c++ |  1 |  102400 | SINUSOIDAL |  14.771542 |
| c++ |  1 |  102400 | LINEAR     |  14.811684 |
| c++ |  1 |  102400 | PATCH      |  14.885528 |
| c++ |  1 |  102400 | SINUSOIDAL |  14.708375 |
| c++ |  1 |  102400 | LINEAR     |  14.789178 |
| c++ |  1 |  102400 | PATCH      |  14.889789 |
| c++ |  1 |  102400 | SINUSOIDAL |  14.785051 |
| c++ |  1 |  102400 | LINEAR     |  14.820124 |
| c++ |  1 |  102400 | PATCH      |  14.880805 |
| c++ |  1 |  102400 | SINUSOIDAL |  14.841991 |
| c++ |  1 |  102400 | LINEAR     |  14.790236 |
| c++ |  1 |  102400 | PATCH      |  14.894761 |
| c++ |  1 |  102400 | SINUSOIDAL |  14.785746 |
| c++ |  1 |  102400 | LINEAR     |  14.807325 |
| c++ |  1 |  102400 | PATCH      |  14.884035 |
| c++ |  1 |  102400 | SINUSOIDAL |  14.776563 |
| c++ |  1 |  102400 | LINEAR     |  14.845854 |
| c++ |  1 |  102400 | PATCH      |  14.920949 |
| c++ |  1 |  102400 | SINUSOIDAL |  14.745106 |
| c++ |  1 |  102400 | LINEAR     |  14.791319 |
| c++ |  1 |  102400 | PATCH      |  14.886206 |
| c++ |  1 |  102400 | SINUSOIDAL |  14.758929 |
| c++ |  1 |  102400 | LINEAR     |  14.819098 |
| c++ |  1 |  102400 | PATCH      |  14.880516 |
| c++ |  1 |  102400 | SINUSOIDAL |  14.692866 |
| c++ |  1 |  102400 | LINEAR     |  14.261796 |
| c++ |  1 |  102400 | PATCH      |  14.888987 |
| c++ |  1 |  102400 | SINUSOIDAL |  14.779386 |
| c++ |  1 |  102400 | LINEAR     |  14.814709 |
| c++ |  1 |  102400 | PATCH      |  14.891956 |
| c++ |  2 |  204800 | SINUSOIDAL |  29.229242 |
| c++ |  2 |  204800 | LINEAR     |  29.723541 |
| c++ |  2 |  204800 | PATCH      |  14.858468 |
| c++ |  2 |  204800 | SINUSOIDAL |  29.270813 |
| c++ |  2 |  204800 | LINEAR     |  29.749502 |
| c++ |  2 |  204800 | PATCH      |  14.891918 |
| c++ |  2 |  204800 | SINUSOIDAL |  29.388419 |
| c++ |  2 |  204800 | LINEAR     |  29.737179 |
| c++ |  2 |  204800 | PATCH      |  14.906549 |
| c++ |  2 |  204800 | SINUSOIDAL |  29.328541 |
| c++ |  2 |  204800 | LINEAR     |  29.676243 |
| c++ |  2 |  204800 | PATCH      |  14.907756 |
| c++ |  2 |  204800 | SINUSOIDAL |  29.366908 |
| c++ |  2 |  204800 | LINEAR     |  29.574573 |
| c++ |  2 |  204800 | PATCH      |  14.900001 |
| c++ |  2 |  204800 | SINUSOIDAL |  29.273719 |
| c++ |  2 |  204800 | LINEAR     |  29.755425 |
| c++ |  2 |  204800 | PATCH      |  14.770782 |
| c++ |  2 |  204800 | SINUSOIDAL |  29.255447 |
| c++ |  2 |  204800 | LINEAR     |  29.587158 |
| c++ |  2 |  204800 | PATCH      |  14.888521 |
| c++ |  2 |  204800 | SINUSOIDAL |  29.347516 |
| c++ |  2 |  204800 | LINEAR     |  29.739948 |
| c++ |  2 |  204800 | PATCH      |  14.871917 |
| c++ |  2 |  204800 | SINUSOIDAL |  29.357334 |
| c++ |  2 |  204800 | LINEAR     |   29.76437 |
| c++ |  2 |  204800 | PATCH      |  14.889273 |
| c++ |  2 |  204800 | SINUSOIDAL |  29.293563 |
| c++ |  2 |  204800 | LINEAR     |  29.654737 |
| c++ |  2 |  204800 | PATCH      |  14.903275 |
| c++ |  4 |  409600 | SINUSOIDAL |  40.447843 |
| c++ |  4 |  409600 | LINEAR     |  56.019123 |
| c++ |  4 |  409600 | PATCH      |  14.885453 |
| c++ |  4 |  409600 | SINUSOIDAL |   40.19313 |
| c++ |  4 |  409600 | LINEAR     |  56.072099 |
| c++ |  4 |  409600 | PATCH      |  14.888546 |
| c++ |  4 |  409600 | SINUSOIDAL |  40.232512 |
| c++ |  4 |  409600 | LINEAR     |  55.864331 |
| c++ |  4 |  409600 | PATCH      |  14.879354 |

#+begin_src bash :dir pic-r-wk
cat */*.out | csplit - '/.*#.*/' '{*}' -s
FILES=`ls xx*`
rm -f results.csv
for file in $FILES
do
cat $file | tr ':' '=' | grep -e "Number of ranks" -e "Number of particles requested" -e "Rate" -e "Initialization mode" \
     | awk -F '=' ' { print $2 } ' | tr '\n' ',' | awk -F ',' ' { print "rust," $1 "," $2 "," $3 "," $4 } ' >> results.csv
done
rm xx*
#+end_src

#+RESULTS:
| rust | 12 | 1228800 | GEOMETRIC  |  64.440502 |
| rust | 12 | 1228800 | SINUSOIDAL |  87.944014 |
| rust | 12 | 1228800 | LINEAR     | 129.195807 |
| rust | 12 | 1228800 | PATCH      |  17.860641 |
| rust | 12 | 1228800 | SINUSOIDAL |  89.081732 |
| rust | 12 | 1228800 | LINEAR     | 127.819703 |
| rust | 12 | 1228800 | PATCH      |  17.519601 |
| rust | 12 | 1228800 | SINUSOIDAL |  87.854542 |
| rust | 12 | 1228800 | LINEAR     | 129.964768 |
| rust | 12 | 1228800 | PATCH      |  17.508793 |
| rust | 12 | 1228800 | SINUSOIDAL |   88.92248 |
| rust |  4 |  409600 | SINUSOIDAL |  49.854817 |
| rust |  4 |  409600 | LINEAR     |  57.918194 |
| rust |  4 |  409600 | PATCH      |    16.1159 |
| rust |  4 |  409600 | SINUSOIDAL |  49.930422 |
| rust |  4 |  409600 | LINEAR     |  58.010094 |
| rust |  4 |  409600 | PATCH      |  16.207877 |
| rust |  4 |  409600 | SINUSOIDAL |  49.810514 |
| rust |  4 |  409600 | LINEAR     |  56.845114 |
| rust |  4 |  409600 | PATCH      |  16.190719 |
| rust |  4 |  409600 | SINUSOIDAL |  50.072894 |
| rust | 12 | 1228800 | LINEAR     | 129.554465 |
| rust |  4 |  409600 | LINEAR     |  58.114323 |
| rust |  4 |  409600 | PATCH      |  16.164221 |
| rust |  4 |  409600 | SINUSOIDAL |  49.683146 |
| rust |  4 |  409600 | LINEAR     |  56.324013 |
| rust |  4 |  409600 | PATCH      |  16.159483 |
| rust |  4 |  409600 | SINUSOIDAL |  49.850338 |
| rust |  4 |  409600 | LINEAR     |  57.653416 |
| rust |  4 |  409600 | PATCH      |  16.159196 |
| rust |  4 |  409600 | SINUSOIDAL |  48.367679 |
| rust |  4 |  409600 | LINEAR     |  58.063863 |
| rust | 12 | 1228800 | PATCH      |  17.574567 |
| rust |  4 |  409600 | PATCH      |  16.088488 |
| rust |  8 |  819200 | SINUSOIDAL |  86.383113 |
| rust |  8 |  819200 | LINEAR     |  99.398557 |
| rust |  8 |  819200 | PATCH      |  15.913033 |
| rust |  8 |  819200 | SINUSOIDAL |   87.93099 |
| rust |  8 |  819200 | LINEAR     |  97.383898 |
| rust |  8 |  819200 | PATCH      |  15.804124 |
| rust |  8 |  819200 | SINUSOIDAL |  85.711292 |
| rust |  8 |  819200 | LINEAR     |  96.470726 |
| rust |  8 |  819200 | PATCH      |  16.043375 |
| rust | 12 | 1228800 | SINUSOIDAL |  89.257502 |
| rust |  8 |  819200 | SINUSOIDAL |  86.171566 |
| rust |  8 |  819200 | LINEAR     |  97.659426 |
| rust |  8 |  819200 | PATCH      |  15.832144 |
| rust |  8 |  819200 | SINUSOIDAL |  85.916207 |
| rust |  8 |  819200 | LINEAR     | 100.237229 |
| rust |  8 |  819200 | PATCH      |  16.012432 |
| rust |  8 |  819200 | SINUSOIDAL |  86.283431 |
| rust |  8 |  819200 | LINEAR     |   98.81802 |
| rust |  8 |  819200 | PATCH      |  16.062288 |
| rust |  8 |  819200 | SINUSOIDAL |  86.465731 |
| rust | 12 | 1228800 | LINEAR     | 130.288421 |
| rust |  8 |  819200 | LINEAR     | 100.049672 |
| rust |  8 |  819200 | PATCH      |  15.897064 |
| rust |  8 |  819200 | SINUSOIDAL |  85.829598 |
| rust |  8 |  819200 | LINEAR     |  97.698879 |
| rust |  8 |  819200 | PATCH      |  15.809602 |
| rust |  8 |  819200 | SINUSOIDAL |  87.563795 |
| rust |  8 |  819200 | LINEAR     |  97.118744 |
| rust |  8 |  819200 | PATCH      |  16.028298 |
| rust |  8 |  819200 | SINUSOIDAL |  87.056444 |
| rust |  8 |  819200 | LINEAR     |   98.35738 |
| rust | 12 | 1228800 | PATCH      |  17.626115 |
| rust |  8 |  819200 | PATCH      |  16.045236 |
| rust | 12 | 1228800 | SINUSOIDAL |   89.04596 |
| rust | 12 | 1228800 | LINEAR     |  129.00233 |
| rust | 12 | 1228800 | PATCH      |  17.519605 |
| rust | 12 | 1228800 | SINUSOIDAL |  84.000224 |
| rust | 12 | 1228800 | LINEAR     | 128.598094 |
| rust | 12 | 1228800 | PATCH      |  17.461184 |
| rust | 12 | 1228800 | SINUSOIDAL |  88.068657 |
| rust | 12 | 1228800 | LINEAR     |  129.29554 |
| rust | 12 | 1228800 | PATCH      |  17.738894 |
| rust | 12 | 1228800 | SINUSOIDAL |  89.464852 |
| rust | 12 | 1228800 | LINEAR     | 129.723217 |
| rust | 12 | 1228800 | PATCH      |  17.573804 |
| rust | 12 | 1228800 | SINUSOIDAL |  88.318734 |
| rust | 12 | 1228800 | LINEAR     | 129.494862 |
| rust | 12 | 1228800 | PATCH      |  17.469148 |
| rust |  1 |  102400 | SINUSOIDAL |  16.230286 |
| rust |  1 |  102400 | LINEAR     |  15.697151 |
| rust |  1 |  102400 | PATCH      |  16.417611 |
| rust |  1 |  102400 | SINUSOIDAL |   16.07877 |
| rust |  1 |  102400 | LINEAR     |  15.616973 |
| rust |  1 |  102400 | PATCH      |  16.340278 |
| rust |  1 |  102400 | SINUSOIDAL |  16.088145 |
| rust |  1 |  102400 | LINEAR     |  15.584175 |
| rust |  1 |  102400 | PATCH      |  16.468654 |
| rust |  1 |  102400 | SINUSOIDAL |  16.076653 |
| rust |  1 |  102400 | LINEAR     |  15.295275 |
| rust |  1 |  102400 | PATCH      |  16.437824 |
| rust |  1 |  102400 | SINUSOIDAL |  15.863509 |
| rust |  1 |  102400 | LINEAR     |  15.585458 |
| rust |  1 |  102400 | PATCH      |   16.42076 |
| rust |  1 |  102400 | SINUSOIDAL |   16.12935 |
| rust |  1 |  102400 | LINEAR     |  15.628766 |
| rust |  1 |  102400 | PATCH      |  16.394415 |
| rust |  1 |  102400 | SINUSOIDAL |  16.183521 |
| rust |  1 |  102400 | LINEAR     |  15.730692 |
| rust |  1 |  102400 | PATCH      |  16.394149 |
| rust |  1 |  102400 | SINUSOIDAL |  16.168845 |
| rust |  1 |  102400 | LINEAR     |  15.657606 |
| rust |  1 |  102400 | PATCH      |  16.443226 |
| rust |  1 |  102400 | SINUSOIDAL |  16.111564 |
| rust |  1 |  102400 | LINEAR     |  15.653843 |
| rust |  1 |  102400 | PATCH      |  16.404007 |
| rust |  1 |  102400 | SINUSOIDAL |  16.150897 |
| rust |  1 |  102400 | LINEAR     |  15.492271 |
| rust |  1 |  102400 | PATCH      |  16.477891 |
| rust |  2 |  204800 | SINUSOIDAL |  30.420311 |
| rust |  2 |  204800 | LINEAR     |  31.812536 |
| rust |  2 |  204800 | PATCH      |  15.993357 |
| rust |  2 |  204800 | SINUSOIDAL |  30.233756 |
| rust |  2 |  204800 | LINEAR     |  32.049463 |
| rust |  2 |  204800 | PATCH      |  15.849168 |
| rust |  2 |  204800 | SINUSOIDAL |  30.556093 |
| rust |  2 |  204800 | LINEAR     |  32.108612 |
| rust |  2 |  204800 | PATCH      |  15.855097 |
| rust |  2 |  204800 | SINUSOIDAL |  30.381079 |
| rust |  2 |  204800 | LINEAR     |  32.117325 |
| rust |  2 |  204800 | PATCH      |  15.843937 |
| rust |  2 |  204800 | SINUSOIDAL |  30.464601 |
| rust |  2 |  204800 | LINEAR     |  31.770242 |
| rust |  2 |  204800 | PATCH      |  15.894435 |
| rust |  2 |  204800 | SINUSOIDAL |  30.679727 |
| rust |  2 |  204800 | LINEAR     |  30.504873 |
| rust |  2 |  204800 | PATCH      |  15.850925 |
| rust |  2 |  204800 | SINUSOIDAL |  30.417435 |
| rust |  2 |  204800 | LINEAR     |  32.137897 |
| rust |  2 |  204800 | PATCH      |  15.912426 |
| rust |  2 |  204800 | SINUSOIDAL |  30.651552 |
| rust |  2 |  204800 | LINEAR     |  32.096714 |
| rust |  2 |  204800 | PATCH      |  15.925032 |
| rust |  2 |  204800 | SINUSOIDAL |  30.772936 |
| rust |  2 |  204800 | LINEAR     |  32.142367 |
| rust |  2 |  204800 | PATCH      |  15.939054 |
| rust |  2 |  204800 | SINUSOIDAL |  30.461328 |
| rust |  2 |  204800 | LINEAR     |  32.144412 |
| rust |  2 |  204800 | PATCH      |  15.966704 |
| rust |  4 |  409600 | SINUSOIDAL |  50.012804 |
| rust |  4 |  409600 | LINEAR     |  58.032087 |
| rust |  4 |  409600 | PATCH      |  15.921132 |
| rust |  4 |  409600 | SINUSOIDAL |  49.841167 |
| rust |  4 |  409600 | LINEAR     |  57.908578 |
| rust |  4 |  409600 | PATCH      |  16.177206 |
| rust |  4 |  409600 | SINUSOIDAL |  49.840475 |
| rust |  4 |  409600 | LINEAR     |  56.735334 |
| rust |  4 |  409600 | PATCH      |  16.143968 |

#+begin_src bash
cat pic-c-wk/results.csv pic-r-wk/results.csv > pic-wk.csv
#+end_src
